#!/bin/sh

# Pre-push hook to prevent commits with [wip] or "wip" from being pushed
# Also runs make format and make full to ensure code quality before pushing

# Function to check if a commit message contains WIP
contains_wip() {
  local commit_msg="$1"
  echo "$commit_msg" | grep -i -E '\[wip\]|"wip"|wip' >/dev/null
  return $?
}

# Store the current branch name
current_branch=$(git rev-parse --abbrev-ref HEAD)
temp_branch="pre-push-$(date +%s)"

# Create unique stash name
STASH_NAME="pre-push-$(date +%s)"
git stash save --quiet --include-untracked $STASH_NAME

cleanup() {
  local exit_code=$?

  # First return to original branch if on temp branch
  if git rev-parse --verify "$temp_branch" >/dev/null 2>&1; then
    git checkout "$current_branch" >/dev/null 2>&1
    git branch -D "$temp_branch" >/dev/null 2>&1
  fi

  # Then restore stashed changes
  STASHES=$(git stash list)
  if [[ $STASHES == *"$STASH_NAME" ]]; then
    git stash pop --quiet
  fi

  # Clean up temporary files
  rm -f /tmp/pre-push-hook-refs

  # If this was called due to an error or interrupt, propagate the exit code
  if [ $exit_code -ne 0 ]; then
    exit $exit_code
  fi
}

# This is STDIN for the pre-push hook from git
# It contains the ref information being pushed
cat >/tmp/pre-push-hook-refs

echo "Checking for WIP commits in push..."

# Check each commit that would be pushed
z40=0000000000000000000000000000000000000000
while read local_ref local_sha remote_ref remote_sha; do
  # Only examine actual branches being pushed (not tags, etc)
  if [[ "$local_ref" == refs/heads/* ]]; then
    # Extract branch name from ref
    branch_name=${local_ref#refs/heads/}

    # Check if we're creating a new branch or deleting a branch
    if [[ "$remote_sha" == $z40 ]]; then
      # New branch, examine all commits
      range="$local_sha"
    else
      # Update to existing branch, examine new commits
      range="$remote_sha..$local_sha"

      # Check if this is a fast-forward push
      # Note: We'll accept non-fast-forward since the user may be using -f/--force
      # The remote will reject the push if -f isn't specified, so we don't need to check here
      if ! git merge-base --is-ancestor "$remote_sha" "$local_sha"; then
        echo "Non-fast-forward push detected for branch $branch_name"
        echo "Continuing with validation (the remote will reject if --force isn't used)"
      fi
    fi

    echo "Examining commits in range: $range"

    # Get list of commits in range
    commits_to_check=$(git log --format=%H "$range")

    # If there are commits to check
    if [ -n "$commits_to_check" ]; then
      # Check each commit in the range for WIP
      for commit in $commits_to_check; do
        commit_msg=$(git log -1 --format=%B "$commit")

        if contains_wip "$commit_msg"; then
          echo >&2 "ERROR: Attempting to push commit with [wip] or \"wip\" in the message:"
          echo >&2 "Commit: $commit"
          echo >&2 "Message: $commit_msg"
          echo >&2 ""
          echo >&2 "Push rejected. Please rebase/amend the WIP commit before pushing."
          exit 1
        fi
      done
    else
      echo "No new commits to check"
    fi

    # Set up trap to ensure cleanup on exit or interrupt
    trap cleanup EXIT INT TERM

    # Check out the code being pushed
    echo "Creating temporary branch $temp_branch for validation..."
    git checkout -b "$temp_branch" "$local_sha" >/dev/null 2>&1

    # Always run make format unconditionally
    echo "Running make format before pushing..."
    make format
    format_result=$?

    # Run make full to ensure all tests pass before pushing
    if [ $format_result -eq 0 ]; then
      echo "Running make full before pushing..."
      make full
      full_result=$?
    else
      full_result=1
    fi

    # Check results
    if [ $format_result -ne 0 ]; then
      echo >&2 "ERROR: 'make format' failed. Please run 'make format' locally and commit the changes before pushing."
      exit 1
    fi

    if [ $full_result -ne 0 ]; then
      echo >&2 "ERROR: 'make full' failed. Please fix the issues before pushing."
      exit 1
    fi

    # Use cleanup function to restore state
    cleanup
    trap - EXIT INT TERM
  fi
done </tmp/pre-push-hook-refs

cleanup
trap - EXIT INT TERM
exit 0
