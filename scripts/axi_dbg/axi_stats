#!/usr/bin/env python3

import math
import json
import os
import sys
import time

from jinja2 import Environment, FileSystemLoader

from axi_bridge_uart import AxiBridgeUart

# TODO: this file should get broken up into parts, with some unit tests for each.
# It grew organically from an initial debugging tool into a full blown templated
# performance testing tool.

# Each set of registers is at a base address that depends on the number of managers in use.
# The registers are memory mapped to a 32bit address space with the upper bits selecting
# the register set to address.
#
# Based on the AXIL connection configuration of the router that takes the form:
#   .m_axil_awvalid({
#     stats_perf_awvalid, ctrl_awvalid, stats_top_awvalid, ctrl_top_awvalid
#   }),
#
# The addressing scheme is:
#  0: ctrl_top (top level control)
#  1: stats_top (top level stats)
#  2 to 2+NUM_M-1: ctrl_0 to ctrl_(NUM_M-1) (manager control registers)
#  2+NUM_M to 2+2*NUM_M-1: stats_perf_0 to stats_perf_(NUM_M-1) (manager stats)
#
# And each of those indexes is mapped to memory address:
#
#   base_addr = (idx << (32 - $clog2(2 + 2*NUM_M)))

# The word size is not necessarily 32bits, but it usually will be
BYTES_PER_WORD = 4

# the top control regs are at memory base 0
REG_TOP_CTRL = {
    "REG_START": 0,
    "REG_IDLE": 1,
    "REG_NUM_M": 2,
    "REG_CLK_FREQ": 3,
    "REG_CLEAR": 4,
    "REG_DATA_WIDTH": 5,
}

REG_CTRL = {
    "REG_W_BASE_ADDR": 0,
    "REG_W_BURST_ID": 1,
    "REG_W_BURST_BEATS": 2,
    "REG_W_BURST_STRIDE": 3,
    "REG_W_BURST_AWSIZE": 4,
    "REG_W_BURST_NUM": 5,
    "REG_R_BASE_ADDR": 6,
    "REG_R_BURST_ID": 7,
    "REG_R_BURST_BEATS": 8,
    "REG_R_BURST_STRIDE": 9,
    "REG_R_BURST_ARSIZE": 10,
    "REG_R_BURST_NUM": 11,
}

# Stats register definitions.
REG_STATS = {
    "STAT_AW_BURST_CNT": 0,
    "STAT_AW_DEPTH_MAX": 1,
    "STAT_AW_LEN_MIN": 2,
    "STAT_AW_LEN_MAX": 3,
    "STAT_AW_BYTES_SUM": 4,
    "STAT_AW_BYTES_MIN": 5,
    "STAT_AW_BYTES_MAX": 6,
    "STAT_W_BURST_CNT": 7,
    "STAT_W_DEPTH_MAX": 8,
    "STAT_W_BEAT_CNT": 9,
    "STAT_W_BYTES_SUM": 10,
    "STAT_W_BYTES_MIN": 11,
    "STAT_W_BYTES_MAX": 12,
    "STAT_W_DATA_LAG_CNT": 13,
    "STAT_W_IDLE_CNT": 14,
    "STAT_W_EARLY_BEAT_CNT": 15,
    "STAT_W_AWR_EARLY_CNT": 16,
    "STAT_W_B_LAG_CNT": 17,
    "STAT_W_B_STALL_CNT": 18,
    "STAT_W_B_END_CNT": 19,
    "STAT_W_SLOW_DATA_CNT": 20,
    "STAT_W_STALL_CNT": 21,
    "STAT_W_ADDR_STALL_CNT": 22,
    "STAT_W_ADDR_LAG_CNT": 23,
    "STAT_W_EARLY_STALL_CNT": 24,
    "STAT_W_ERR_CNT": 25,
    "STAT_AR_BURST_CNT": 26,
    "STAT_AR_DEPTH_MAX": 27,
    "STAT_AR_LEN_MIN": 28,
    "STAT_AR_LEN_MAX": 29,
    "STAT_AR_BYTES_SUM": 30,
    "STAT_AR_BYTES_MIN": 31,
    "STAT_AR_BYTES_MAX": 32,
    "STAT_R_BURST_CNT": 33,
    "STAT_R_DEPTH_MAX": 34,
    "STAT_R_BEAT_CNT": 35,
    "STAT_RD_OUTSTANDING_MAX": 36,
    "STAT_RD_MAX_RESP": 37,
    "STAT_RD_R_STALLS": 38,
    "STAT_RD_SLOW_LINK": 39,
    "STAT_RD_LAG": 40,
    "STAT_RD_IDLE_CYCLES": 41,
    "STAT_RD_AR_STALLS": 42,
    "STAT_RD_AR_CYCLES": 43,
    "STAT_R_ERR_CNT": 44,
}

# AXI response codes
AXI_RESP = {0x0: "OKAY", 0x1: "EXOKAY", 0x2: "SLVERR", 0x3: "DECERR"}


def safe_div(numerator, denominator):
    """Safely divide two numbers, return 0 if denominator is 0"""
    return numerator / denominator if denominator else 0


def get_num_managers(axi):
    """Read the number of managers from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_NUM_M"] * BYTES_PER_WORD)
    resp, num_m = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(f"Error reading NUM_M at 0x{addr:08X}: {err} (0x{resp:02X})")
    if num_m <= 0:
        raise ValueError(f"Invalid number of managers: {num_m}")
    return num_m


def get_clock_freq(axi):
    """Read the clock frequency from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_CLK_FREQ"] * BYTES_PER_WORD)
    resp, freq = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(
            f"Error reading CLK_FREQ at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
    if freq <= 0:
        raise ValueError(f"Invalid clock frequency: {freq} Hz")
    return freq


def get_axi_data_width(axi):
    """Read the AXI data width from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_DATA_WIDTH"] * BYTES_PER_WORD)
    resp, data_width = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(
            f"Error reading DATA_WIDTH at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
    if data_width <= 0:
        raise ValueError(f"Invalid AXI data width: {data_width} bits")
    return data_width


def gen_manager_settings(
    manager_id,
    data_width,
    #
    # Write-side config
    #
    w_base_addr=None,
    w_burst_id=None,
    w_burst_beats=64,
    w_burst_num=128,
    w_burst_stride=None,
    w_burst_awsize=None,
    start_write=True,
    #
    # Read-side config
    #
    r_base_addr=None,
    r_burst_id=None,
    r_burst_beats=64,
    r_burst_num=128,
    r_burst_stride=None,
    r_burst_arsize=None,
    start_read=True,
):
    """Generate independent read/write settings for a manager."""

    if w_base_addr is None:
        w_base_addr = manager_id * 512

    # separate them if not specified
    if r_base_addr is None:
        r_base_addr = w_base_addr + 128

    if w_burst_id is None:
        w_burst_id = manager_id

    if w_burst_stride is None:
        w_burst_stride = w_burst_beats * (data_width // 8)

    if r_burst_stride is None:
        r_burst_stride = r_burst_beats * (data_width // 8)

    if w_burst_awsize is None:
        w_burst_awsize = int(math.log2(data_width // 8))

    if r_burst_arsize is None:
        r_burst_arsize = int(math.log2(data_width // 8))

    if r_burst_id is None:
        r_burst_id = manager_id

    return {
        #
        # Write-side registers
        #
        "REG_W_BASE_ADDR": w_base_addr,
        "REG_W_BURST_ID": w_burst_id,
        "REG_W_BURST_BEATS": w_burst_beats,
        "REG_W_BURST_STRIDE": w_burst_stride,
        "REG_W_BURST_AWSIZE": w_burst_awsize,
        "REG_W_BURST_NUM": w_burst_num,
        #
        # Read-side registers
        #
        "REG_R_BASE_ADDR": r_base_addr,
        "REG_R_BURST_ID": r_burst_id,
        "REG_R_BURST_BEATS": r_burst_beats,
        "REG_R_BURST_STRIDE": r_burst_stride,
        "REG_R_BURST_ARSIZE": r_burst_arsize,
        "REG_R_BURST_NUM": r_burst_num,
        #
        # Flags
        #
        "start_write": start_write,
        "start_read": start_read,
    }


def calculate_base_addr(idx, num_m):
    """Calculate the base address for a given register set index based on NUM_M"""
    # Calculate $clog2(NUM_M * 2 + 2) - the number of bits needed to represent all sets
    sel_bits = math.ceil(math.log2(num_m * 2 + 2))
    shift_amount = 32 - sel_bits
    return idx << shift_amount


def read_register(axi, base_addr, reg_name, reg_set):
    """Read from a specific register

    Args:
        axi: AxiBridgeUart instance
        base_addr: Base address for the register set
        reg_name: Name of the register to read
        reg_set: Dictionary mapping register names to offsets

    Returns:
        The value of the register, or None if an error occurs
    """
    if reg_name not in reg_set:
        print(f"Error: Unknown register {reg_name}")
        return None

    offset = reg_set[reg_name]
    addr = base_addr + (offset * BYTES_PER_WORD)
    resp, value = axi.read_word(addr)

    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        print(f"Error reading {reg_name} at 0x{addr:08X}: {err} (0x{resp:02X})")
        return None
    return value


def read_registers(axi, base_addr, reg_set):
    """Read registers from the given register set and return as a dictionary"""
    result = {}
    for key in reg_set:
        value = read_register(axi, base_addr, key, reg_set)
        if value is None:
            sys.exit(1)
        result[key] = value
    return result


def write_register(axi, base_addr, reg_name, reg_set, value):
    """Write to a specific register"""
    if reg_name not in reg_set:
        print(f"Error: Unknown register {reg_name}")
        return False

    offset = reg_set[reg_name]
    addr = base_addr + (offset * BYTES_PER_WORD)
    resp = axi.write_word(addr, value)

    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        print(
            f"Error writing {value} to {reg_name} at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
        return False
    return True


def wait_for_idle(axi, num_m, timeout_seconds=10):
    """Wait for the system to become idle or until timeout

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers
        timeout_seconds: Maximum time to wait in seconds


    Raises:
        TimeoutError: If the system does not become idle within the timeout period

    Returns:
        True if system became idle, False if timeout occurred
    """
    start_time = time.time()
    top_ctrl_addr = calculate_base_addr(0, num_m)

    while time.time() - start_time < timeout_seconds:
        idle = read_register(axi, top_ctrl_addr, "REG_IDLE", REG_TOP_CTRL)
        if idle is None:
            raise RuntimeError("Failed to read IDLE register")

        if idle != 0:
            print("# Done")
            return True

        # Sleep briefly to avoid hammering the bus
        time.sleep(0.1)

    raise TimeoutError(
        f"Timeout after {timeout_seconds} seconds waiting for system to become idle"
    )


def clear_perf(axi, num_m):
    """Clear the AXI perf test metrics by writing to the CLEAR register

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers

    Returns:
        True if successfully cleared, False otherwise
    """
    top_ctrl_addr = calculate_base_addr(0, num_m)

    print("# Clearing Perf system metrics...")
    return write_register(axi, top_ctrl_addr, "REG_CLEAR", REG_TOP_CTRL, 1)


# start bits are sent all at once so that the start can be atomic on the
# fpga side
def start_perf(axi, num_m, settings_dict):
    """Start the AXI perf test using per-manager start flags.

    Bit layout of REG_START:
    - Bits [0:num_m-1]: start write for each manager
    - Bits [num_m:2*num_m-1]: start read for each manager
    """
    top_ctrl_addr = calculate_base_addr(0, num_m)
    start_mask = 0

    for manager_id, settings in settings_dict.items():
        if manager_id < 0 or manager_id >= num_m:
            print(f"Warning: manager_id {manager_id} out of range (0 to {num_m - 1})")
            continue

        if settings.get("start_write", False):
            start_mask |= 1 << manager_id

        if settings.get("start_read", False):
            start_mask |= 1 << (num_m + manager_id)

    print(f"# Starting Perf system with mask 0x{start_mask:08X}")
    return write_register(axi, top_ctrl_addr, "REG_START", REG_TOP_CTRL, start_mask)


def print_raw_settings(settings, manager_id):
    """Print settings registers in the same format as other registers"""
    print(f"\n# Settings Register Values for Manager {manager_id}")
    for idx, (key, value) in enumerate(settings.items()):
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower() if "_" in key else key.lower()
        print(f" {idx:02d}\t{name:<18}\t0x{value:<8x}\t{value:<10}")


def write_manager_settings(axi, manager_id, num_m, settings):
    """Write settings to a manager's control registers"""
    # Manager control regs are at indices 2 to (2+NUM_M-1)
    m_ctrl_idx = 2 + manager_id
    m_ctrl_addr = calculate_base_addr(m_ctrl_idx, num_m)
    print_raw_settings(settings, manager_id)

    for reg_name, value in settings.items():
        if not reg_name.startswith("REG_"):
            continue  # Skip non-register fields like "start_write"
        if reg_name in REG_CTRL:
            write_register(axi, m_ctrl_addr, reg_name, REG_CTRL, value)
        else:
            print(f" Warning: Skipping unknown register '{reg_name}'")


def print_raw_stats(stats, label=""):
    """Print all raw statistics registers"""
    print(f"\n# Raw Register Values{' for ' + label if label else ''}")
    for idx, (key, offset) in enumerate(REG_STATS.items()):
        val = stats.get(key, 0)
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower()
        print(f" {offset:02d}\t{name:<18}\t0x{val:<8x}\t{val:<10}")


def print_raw_ctrl(ctrl, label=""):
    """Print all control registers"""
    print(f"\n# Control Register Values{' for ' + label if label else ''}")
    reg_set = REG_TOP_CTRL if "REG_NUM_M" in ctrl else REG_CTRL
    for idx, (key, offset) in enumerate(reg_set.items()):
        val = ctrl.get(key, 0)
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower()
        print(f" {offset:02d}\t{name:<18}\t0x{val:<8x}\t{val:<10}")


def calculate_write_perf_metrics(stats):
    """Calculate write performance metrics from stats registers"""
    # Extract basic counters
    write_bursts = stats.get("STAT_W_BURST_CNT", 1)  # Avoid division by zero
    write_beats = stats.get("STAT_W_BEAT_CNT", 0)
    total_write_bytes = stats.get("STAT_AW_BYTES_SUM", 0)

    # Calculate write latency
    write_latency_numerator = (
        stats.get("STAT_W_EARLY_BEAT_CNT", 0)
        + stats.get("STAT_W_DATA_LAG_CNT", 0)
        + stats.get("STAT_W_EARLY_STALL_CNT", 0)
        + stats.get("STAT_W_B_STALL_CNT", 0)
        + stats.get("STAT_W_ADDR_STALL_CNT", 0)
        + stats.get("STAT_W_ADDR_LAG_CNT", 0)
        + stats.get("STAT_W_B_LAG_CNT", 0)
    )
    write_latency = safe_div(write_latency_numerator, write_bursts)

    # Calculate throughput
    write_throughput_denominator = (
        write_beats
        + stats.get("STAT_W_STALL_CNT", 0)
        + stats.get("STAT_W_AWR_EARLY_CNT", 0)
        + stats.get("STAT_W_SLOW_DATA_CNT", 0)
    )
    write_throughput = safe_div(write_beats, write_throughput_denominator)

    # Calculate bandwidth in bytes per cycle
    bandwidth_bytes_per_cycle = safe_div(
        total_write_bytes, write_throughput_denominator
    )

    return {
        "write_bursts": write_bursts,
        "write_beats": write_beats,
        "total_bytes": total_write_bytes,
        "write_latency": write_latency,
        "write_throughput": write_throughput,
        "bandwidth_bytes_per_cycle": bandwidth_bytes_per_cycle,
    }


def calculate_read_perf_metrics(stats):
    """Calculate read-side performance metrics from stats registers"""
    read_bursts = stats.get("STAT_R_BURST_CNT", 1)  # avoid div by zero
    read_beats = stats.get("STAT_R_BEAT_CNT", 0)
    total_read_bytes = stats.get("STAT_AR_BYTES_SUM", 0)

    # Read latency numerator = lag + AR stalls
    read_latency_numerator = stats.get("STAT_RD_LAG", 0) + stats.get(
        "STAT_RD_AR_STALLS", 0
    )
    read_latency = safe_div(read_latency_numerator, read_bursts)

    # Throughput = beats / (beats + stalls + slow link)
    read_throughput_denominator = (
        read_beats
        + stats.get("STAT_RD_R_STALLS", 0)
        + stats.get("STAT_RD_SLOW_LINK", 0)
    )
    read_throughput = safe_div(read_beats, read_throughput_denominator)

    bandwidth_bytes_per_cycle = safe_div(total_read_bytes, read_throughput_denominator)

    return {
        "read_bursts": read_bursts,
        "read_beats": read_beats,
        "total_bytes": total_read_bytes,
        "read_latency": read_latency,
        "read_throughput": read_throughput,
        "bandwidth_bytes_per_cycle": bandwidth_bytes_per_cycle,
    }


def print_performance_summary(block_name, stats, clock_speed_mhz):
    """Print performance summary statistics"""
    try:
        write_metrics = calculate_write_perf_metrics(stats)
        read_metrics = calculate_read_perf_metrics(stats)

        write_latency = write_metrics["write_latency"]
        write_throughput = write_metrics["write_throughput"]
        write_bandwidth_MBps = (
            write_metrics["bandwidth_bytes_per_cycle"] * clock_speed_mhz
        )

        read_latency = read_metrics["read_latency"]
        read_throughput = read_metrics["read_throughput"]
        read_bandwidth_MBps = (
            read_metrics["bandwidth_bytes_per_cycle"] * clock_speed_mhz
        )

        print(f"\n# Performance Summary for {block_name}:")
        print(f" {'WRITE LATENCY':<20}: {write_latency:.2f} cycles/burst")
        print(f" {'WRITE THROUGHPUT':<20}: {write_throughput:.2f} beats/cycle")
        print(f" {'WRITE BANDWIDTH':<20}: {write_bandwidth_MBps:.2f} MB/s")
        print("")
        print(f" {'READ  LATENCY':<20}: {read_latency:.2f} cycles/burst")
        print(f" {'READ  THROUGHPUT':<20}: {read_throughput:.2f} beats/cycle")
        print(f" {'READ  BANDWIDTH':<20}: {read_bandwidth_MBps:.2f} MB/s")
    except Exception as e:
        print(f" Failed to compute stats for {block_name}: {e}")


def configure_all_managers(axi, num_m, settings_dict):
    """Configure all managers with their respective settings

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers
        settings_dict: Dictionary mapping manager IDs to register settings
    """
    for manager_id, settings in settings_dict.items():
        if manager_id < 0 or manager_id >= num_m:
            print(f"\nError: Invalid manager ID {manager_id}. Valid range: 0-{num_m-1}")
            continue

        write_manager_settings(axi, manager_id, num_m, settings)

        import os


def load_config_from_file(filename, data_width):
    if filename.endswith(".j2"):
        print(f"# Rendering Jinja2 template: {filename}")
        env = Environment(loader=FileSystemLoader(os.path.dirname(filename) or "."))
        template = env.get_template(os.path.basename(filename))
        rendered = template.render(data_width=data_width)
    else:
        with open(filename, "r") as f:
            rendered = f.read()

    raw = json.loads(rendered)

    if isinstance(raw, dict):
        raw = [raw]

    test_cases = []
    for entry in raw:
        meta = entry.get("meta", {})
        raw_managers = entry.get("managers", {})

        settings = {}
        for m_str, conf in raw_managers.items():
            settings[int(m_str)] = conf

        test_cases.append(
            {
                "meta": meta,
                "managers": settings,
            }
        )

    return test_cases


def format_reg_name(key):
    """
    Convert register name to the same format as used in console output
    Example: 'REG_START' becomes 'start', 'STAT_W_BURST_CNT' becomes 'w_burst_cnt'

    Uses same approach as in print_raw_stats() and print_raw_ctrl()
    """
    # Handle non-string keys
    if not isinstance(key, str):
        return key

    # Split on first underscore and take remainder, then lowercase
    # Exactly matches how it's done in the print functions
    name = key.split("_", 1)[1].lower() if "_" in key else key.lower()
    return name


def format_dict_keys(data):
    """
    Recursively format all dictionary keys to match console output style
    """
    if not isinstance(data, dict):
        return data

    result = {}
    for key, value in data.items():
        new_key = format_reg_name(key)

        # Recursively format nested dictionaries
        if isinstance(value, dict):
            result[new_key] = format_dict_keys(value)
        elif isinstance(value, list):
            result[new_key] = [
                format_dict_keys(item) if isinstance(item, dict) else item
                for item in value
            ]
        else:
            result[new_key] = value

    return result


def collect_test_results(top_ctrl, top_stats, manager_data, clock_speed_mhz, meta=None):
    """
    Collect all test results into a structured dictionary for JSON export

    Args:
        top_ctrl: Top-level control register values
        top_stats: Top-level statistics register values
        manager_data: List of dictionaries containing per-manager data
        clock_speed_mhz: Clock speed in MHz
        meta: Optional metadata about the test

    Returns:
        Dictionary with all test results
    """
    # Calculate top-level performance metrics
    top_write_metrics = calculate_write_perf_metrics(top_stats)
    top_read_metrics = calculate_read_perf_metrics(top_stats)

    # Format only register names - not the structure keys
    formatted_top_ctrl = {format_reg_name(k): v for k, v in top_ctrl.items()}
    formatted_top_stats = {format_reg_name(k): v for k, v in top_stats.items()}

    # Build the results structure
    results = {
        "metadata": {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "clock_speed_mhz": clock_speed_mhz,
            "num_managers": top_ctrl.get("REG_NUM_M", 0),
            "data_width_bits": top_ctrl.get("REG_DATA_WIDTH", 0),
        },
        "top_level": {
            "control": formatted_top_ctrl,
            "stats": formatted_top_stats,
            "metrics": {
                "write": {
                    "latency": top_write_metrics["write_latency"],
                    "throughput": top_write_metrics["write_throughput"],
                    "bandwidth_mbps": top_write_metrics["bandwidth_bytes_per_cycle"]
                    * clock_speed_mhz,
                    "total_bytes": top_write_metrics["total_bytes"],
                    "total_bursts": top_write_metrics["write_bursts"],
                    "total_beats": top_write_metrics["write_beats"],
                },
                "read": {
                    "latency": top_read_metrics["read_latency"],
                    "throughput": top_read_metrics["read_throughput"],
                    "bandwidth_mbps": top_read_metrics["bandwidth_bytes_per_cycle"]
                    * clock_speed_mhz,
                    "total_bytes": top_read_metrics["total_bytes"],
                    "total_bursts": top_read_metrics["read_bursts"],
                    "total_beats": top_read_metrics["read_beats"],
                },
            },
        },
        "managers": manager_data,
    }

    # Add test metadata if provided
    if meta:
        results["test_metadata"] = meta

    return results

    # Add test metadata if provided
    if meta:
        results["test_metadata"] = meta

    return results


def export_json(data, filename):
    """
    Export data to a JSON file

    Args:
        data: Data to export
        filename: Output filename

    Returns:
        True if successful, False otherwise
    """
    try:
        with open(filename, "w") as f:
            json.dump(data, f, indent=2)
        print(f"# Results exported to {filename}")
        return True
    except Exception as e:
        print(f"# Error exporting results to {filename}: {e}")
        return False


def run(axi, config_path=None, json_output_path=None):
    """
    Run the AXI performance tests and optionally export results to JSON

    Args:
        axi: AxiBridgeUart instance
        config_path: Optional path to test configuration JSON file
        json_output_path: Optional path to export results as JSON

    Returns:
        List of test results
    """
    num_m = get_num_managers(axi)
    print(f"# Detected NUM_M: {num_m}")

    clock_freq = get_clock_freq(axi)
    clock_speed_mhz = clock_freq / 1_000_000
    print(f"# Clock frequency: {clock_speed_mhz:.2f} MHz")

    data_width = get_axi_data_width(axi)
    print(f"# AXI data width: {data_width} bits")

    if config_path:
        test_cases = load_config_from_file(config_path, data_width)
    else:
        print("# No config provided — running single default config")
        test_cases = [
            {
                "meta": {"label": "default"},
                "managers": {
                    m: gen_manager_settings(m, data_width) for m in range(num_m)
                },
            }
        ]

    # Store system info for JSON output
    system_info = {
        "num_managers": num_m,
        "clock_frequency_hz": clock_freq,
        "clock_speed_mhz": clock_speed_mhz,
        "data_width_bits": data_width,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
    }

    # Store all test results
    all_results = []

    for idx, case in enumerate(test_cases):
        meta = case.get("meta", {})
        user_settings = case.get("managers", {})

        print(f"\n{'='*80}")
        print(f"# TEST {idx+1}: {meta.get('label', 'unnamed')}")
        print(f"{'='*80}")
        for k, v in meta.items():
            print(f"# {k}: {v}")

        # Fill in all managers: use config or fallback to "disabled" default
        settings_dict = {}
        for m in range(num_m):
            if m in user_settings:
                settings_dict[m] = user_settings[m]
            else:
                settings_dict[m] = gen_manager_settings(
                    m, data_width, start_write=False, start_read=False
                )

        print("\n# Configuring managers")
        configure_all_managers(axi, num_m, settings_dict)

        print("\n# Clearing and starting test")
        clear_perf(axi, num_m)
        start_perf(axi, num_m, settings_dict)
        wait_for_idle(axi, num_m)

        print("\n# Collecting results")

        # Top-level register dumps
        top_ctrl_idx = 0
        top_stats_idx = 1
        top_ctrl_addr = calculate_base_addr(top_ctrl_idx, num_m)
        top_stats_addr = calculate_base_addr(top_stats_idx, num_m)

        print(f"\n{'-'*80}")
        print(f"# AGGREGATE STATS")
        print(f"{'-'*80}")
        print(f"# Control base address: 0x{top_ctrl_addr:08X}")
        print(f"# Stats base address:   0x{top_stats_addr:08X}")

        top_ctrl = read_registers(axi, top_ctrl_addr, REG_TOP_CTRL)
        print_raw_ctrl(top_ctrl, "Top-level")

        top_stats = read_registers(axi, top_stats_addr, REG_STATS)
        print_raw_stats(top_stats, "Top-level")

        print_performance_summary("AXI (Top-level)", top_stats, clock_speed_mhz)

        # Collect manager stats
        manager_data = []

        # Per-manager stats
        for m in range(num_m):
            m_ctrl_idx = 2 + m
            m_stats_idx = 2 + num_m + m

            m_ctrl_addr = calculate_base_addr(m_ctrl_idx, num_m)
            m_stats_addr = calculate_base_addr(m_stats_idx, num_m)

            m_ctrl = read_registers(axi, m_ctrl_addr, REG_CTRL)
            m_stats = read_registers(axi, m_stats_addr, REG_STATS)

            print(f"\n{'-'*80}")
            print(f"# MANAGER {m}")
            print(f"{'-'*80}")
            print(f"# Control base address: 0x{m_ctrl_addr:08X}")
            print(f"# Stats base address:   0x{m_stats_addr:08X}")
            print_raw_ctrl(m_ctrl, f"Manager {m}")
            print_raw_stats(m_stats, f"Manager {m}")
            print_performance_summary(f"AXI Manager {m}", m_stats, clock_speed_mhz)

            # Calculate per-manager metrics for JSON export
            write_metrics = calculate_write_perf_metrics(m_stats)
            read_metrics = calculate_read_perf_metrics(m_stats)

            # Store manager data for JSON with formatted register keys
            manager_data.append(
                {
                    "id": m,
                    "control": {format_reg_name(k): v for k, v in m_ctrl.items()},
                    "stats": {format_reg_name(k): v for k, v in m_stats.items()},
                    "metrics": {
                        "write": {
                            "latency": write_metrics["write_latency"],
                            "throughput": write_metrics["write_throughput"],
                            "bandwidth_mbps": write_metrics["bandwidth_bytes_per_cycle"]
                            * clock_speed_mhz,
                            "total_bytes": write_metrics["total_bytes"],
                            "total_bursts": write_metrics["write_bursts"],
                            "total_beats": write_metrics["write_beats"],
                        },
                        "read": {
                            "latency": read_metrics["read_latency"],
                            "throughput": read_metrics["read_throughput"],
                            "bandwidth_mbps": read_metrics["bandwidth_bytes_per_cycle"]
                            * clock_speed_mhz,
                            "total_bytes": read_metrics["total_bytes"],
                            "total_bursts": read_metrics["read_bursts"],
                            "total_beats": read_metrics["read_beats"],
                        },
                    },
                }
            )

        # Collect all results into a structured JSON
        test_result = collect_test_results(
            top_ctrl, top_stats, manager_data, clock_speed_mhz, meta
        )
        all_results.append(test_result)

    # Export results to JSON if output path is provided
    if json_output_path:
        result_data = {"system_info": system_info, "tests": all_results}
        export_json(result_data, json_output_path)

    return all_results


def main():
    if len(sys.argv) < 2:
        print("Usage: axi_stats <serial_port> [config.json] [output.json]")
        return 1

    serial_port = sys.argv[1]
    config_file = sys.argv[2] if len(sys.argv) > 2 else None
    json_output = sys.argv[3] if len(sys.argv) > 3 else None

    try:
        axi = AxiBridgeUart(serial_port)
        run(axi, config_file, json_output)
        print(f"\n# Results successfully exported to {json_output}")
    except Exception as e:
        print(f"Error: {e}")
        return 1
    finally:
        axi.close()

    return 0


if __name__ == "__main__":
    sys.exit(main())
