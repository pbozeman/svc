#!/usr/bin/env python3

import math
import sys
import time

from axi_bridge_uart import AxiBridgeUart

# Each set of registers is at a base address that depends on the number of managers in use.
# The registers are memory mapped to a 32bit address space with the upper bits selecting
# the register set to address.
#
# Based on the AXIL connection configuration of the router that takes the form:
#   .m_axil_awvalid({
#     stats_perf_awvalid, ctrl_awvalid, stats_top_awvalid, ctrl_top_awvalid
#   }),
#
# The addressing scheme is:
#  0: ctrl_top (top level control)
#  1: stats_top (top level stats)
#  2 to 2+NUM_M-1: ctrl_0 to ctrl_(NUM_M-1) (manager control registers)
#  2+NUM_M to 2+2*NUM_M-1: stats_perf_0 to stats_perf_(NUM_M-1) (manager stats)
#
# And each of those indexes is mapped to memory address:
#
#   base_addr = (idx << (32 - $clog2(2 + 2*NUM_M)))

# The word size is not necessarily 32bits, but it usually will be
BYTES_PER_WORD = 4

# the top control regs are at memory base 0
REG_TOP_CTRL = {
    "REG_START": 0,
    "REG_IDLE": 1,
    "REG_NUM_M": 2,
    "REG_CLK_FREQ": 3,
    "REG_CLEAR": 4,
    "REG_DATA_WIDTH": 5,
}

REG_CTRL = {
    "REG_BASE_ADDR": 0,
    "REG_BURST_BEATS": 1,
    "REG_BURST_STRIDE": 2,
    "REG_BURST_AWSIZE": 3,
    "REG_BURST_NUM": 4,
}

# Stats register definitions.
REG_STATS = {
    "STAT_AW_BURST_CNT": 0,
    "STAT_AW_DEPTH_MAX": 1,
    "STAT_AW_LEN_MIN": 2,
    "STAT_AW_LEN_MAX": 3,
    "STAT_AW_BYTES_SUM": 4,
    "STAT_AW_BYTES_MIN": 5,
    "STAT_AW_BYTES_MAX": 6,
    "STAT_W_BURST_CNT": 7,
    "STAT_W_DEPTH_MAX": 8,
    "STAT_W_BEAT_CNT": 9,
    "STAT_W_BYTES_SUM": 10,
    "STAT_W_BYTES_MIN": 11,
    "STAT_W_BYTES_MAX": 12,
    "STAT_W_DATA_LAG_CNT": 13,
    "STAT_W_IDLE_CNT": 14,
    "STAT_W_EARLY_BEAT_CNT": 15,
    "STAT_W_AWR_EARLY_CNT": 16,
    "STAT_W_B_LAG_CNT": 17,
    "STAT_W_B_STALL_CNT": 18,
    "STAT_W_B_END_CNT": 19,
    "STAT_W_SLOW_DATA_CNT": 20,
    "STAT_W_STALL_CNT": 21,
    "STAT_W_ADDR_STALL_CNT": 22,
    "STAT_W_ADDR_LAG_CNT": 23,
    "STAT_W_EARLY_STALL_CNT": 24,
    "STAT_W_ERR_CNT": 25,
}

# AXI response codes
AXI_RESP = {0x0: "OKAY", 0x1: "EXOKAY", 0x2: "SLVERR", 0x3: "DECERR"}


def safe_div(numerator, denominator):
    """Safely divide two numbers, return 0 if denominator is 0"""
    return numerator / denominator if denominator else 0


def get_num_managers(axi):
    """Read the number of managers from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_NUM_M"] * BYTES_PER_WORD)
    resp, num_m = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(f"Error reading NUM_M at 0x{addr:08X}: {err} (0x{resp:02X})")
    if num_m <= 0:
        raise ValueError(f"Invalid number of managers: {num_m}")
    return num_m


def get_clock_freq(axi):
    """Read the clock frequency from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_CLK_FREQ"] * BYTES_PER_WORD)
    resp, freq = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(
            f"Error reading CLK_FREQ at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
    if freq <= 0:
        raise ValueError(f"Invalid clock frequency: {freq} Hz")
    return freq


def get_axi_data_width(axi):
    """Read the AXI data width from the top control register"""
    addr = 0 + (REG_TOP_CTRL["REG_DATA_WIDTH"] * BYTES_PER_WORD)
    resp, data_width = axi.read_word(addr)
    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        raise RuntimeError(
            f"Error reading DATA_WIDTH at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
    if data_width <= 0:
        raise ValueError(f"Invalid AXI data width: {data_width} bits")
    return data_width


def gen_manager_settings(
    manager_id,
    data_width,
    base_addr=None,
    burst_beats=64,
    burst_num=128,
    burst_stride=None,
    burst_awsize=None,
):
    """Generate settings for a manager based on parameters"""
    if base_addr is None:
        base_addr = manager_id * 1024

    if burst_stride is None:
        burst_stride = burst_beats * (data_width // 8)

    if burst_awsize is None:
        burst_awsize = int(math.log2(data_width // 8))

    return {
        "REG_BASE_ADDR": base_addr,
        "REG_BURST_BEATS": burst_beats,
        "REG_BURST_STRIDE": burst_stride,
        "REG_BURST_AWSIZE": burst_awsize,
        "REG_BURST_NUM": burst_num,
    }


def calculate_base_addr(idx, num_m):
    """Calculate the base address for a given register set index based on NUM_M"""
    # Calculate $clog2(NUM_M * 2 + 2) - the number of bits needed to represent all sets
    sel_bits = math.ceil(math.log2(num_m * 2 + 2))
    shift_amount = 32 - sel_bits
    return idx << shift_amount


def read_register(axi, base_addr, reg_name, reg_set):
    """Read from a specific register

    Args:
        axi: AxiBridgeUart instance
        base_addr: Base address for the register set
        reg_name: Name of the register to read
        reg_set: Dictionary mapping register names to offsets

    Returns:
        The value of the register, or None if an error occurs
    """
    if reg_name not in reg_set:
        print(f"Error: Unknown register {reg_name}")
        return None

    offset = reg_set[reg_name]
    addr = base_addr + (offset * BYTES_PER_WORD)
    resp, value = axi.read_word(addr)

    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        print(f"Error reading {reg_name} at 0x{addr:08X}: {err} (0x{resp:02X})")
        return None
    return value


def read_registers(axi, base_addr, reg_set):
    """Read registers from the given register set and return as a dictionary"""
    result = {}
    for key in reg_set:
        value = read_register(axi, base_addr, key, reg_set)
        if value is None:
            sys.exit(1)
        result[key] = value
    return result


def write_register(axi, base_addr, reg_name, reg_set, value):
    """Write to a specific register"""
    if reg_name not in reg_set:
        print(f"Error: Unknown register {reg_name}")
        return False

    offset = reg_set[reg_name]
    addr = base_addr + (offset * BYTES_PER_WORD)
    resp = axi.write_word(addr, value)

    if resp != 0:
        err = AXI_RESP.get(resp, "UNKNOWN")
        print(
            f"Error writing {value} to {reg_name} at 0x{addr:08X}: {err} (0x{resp:02X})"
        )
        return False
    return True


def wait_for_idle(axi, num_m, timeout_seconds=10):
    """Wait for the system to become idle or until timeout

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers
        timeout_seconds: Maximum time to wait in seconds


    Raises:
        TimeoutError: If the system does not become idle within the timeout period

    Returns:
        True if system became idle, False if timeout occurred
    """
    start_time = time.time()
    top_ctrl_addr = calculate_base_addr(0, num_m)

    while time.time() - start_time < timeout_seconds:
        idle = read_register(axi, top_ctrl_addr, "REG_IDLE", REG_TOP_CTRL)
        if idle is None:
            raise RuntimeError("Failed to read IDLE register")

        if idle != 0:
            print("# Done")
            return True

        # Sleep briefly to avoid hammering the bus
        time.sleep(0.1)

    raise TimeoutError(
        f"Timeout after {timeout_seconds} seconds waiting for system to become idle"
    )


def clear_perf(axi, num_m):
    """Clear the AXI perf test metrics by writing to the CLEAR register

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers

    Returns:
        True if successfully cleared, False otherwise
    """
    top_ctrl_addr = calculate_base_addr(0, num_m)

    print("# Clearing Perf system metrics...")
    return write_register(axi, top_ctrl_addr, "REG_CLEAR", REG_TOP_CTRL, 1)


def start_perf(axi, num_m):
    """Start the AXI perf test by writing to the START register

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers

    Returns:
        True if successfully started, False otherwise
    """
    top_ctrl_addr = calculate_base_addr(0, num_m)

    print("# Starting Perf system...")
    return write_register(axi, top_ctrl_addr, "REG_START", REG_TOP_CTRL, 0xF)


def print_raw_settings(settings, manager_id):
    """Print settings registers in the same format as other registers"""
    print(f"\n# Settings Register Values for Manager {manager_id}")
    for idx, (key, value) in enumerate(settings.items()):
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower() if "_" in key else key.lower()
        print(f" {idx:02d}\t{name:<18}\t0x{value:<8x}\t{value:<10}")


def write_manager_settings(axi, manager_id, num_m, settings):
    """Write settings to a manager's control registers"""
    # Manager control regs are at indices 2 to (2+NUM_M-1)
    m_ctrl_idx = 2 + manager_id
    m_ctrl_addr = calculate_base_addr(m_ctrl_idx, num_m)
    print_raw_settings(settings, manager_id)

    for reg_name, value in settings.items():
        if reg_name in REG_CTRL:
            write_register(axi, m_ctrl_addr, reg_name, REG_CTRL, value)
        else:
            print(f" Warning: Skipping unknown register '{reg_name}'")


def print_raw_stats(stats, label=""):
    """Print all raw statistics registers"""
    print(f"\n# Raw Register Values{' for ' + label if label else ''}")
    for idx, (key, offset) in enumerate(REG_STATS.items()):
        val = stats.get(key, 0)
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower()
        print(f" {offset:02d}\t{name:<18}\t0x{val:<8x}\t{val:<10}")


def print_raw_ctrl(ctrl, label=""):
    """Print all control registers"""
    print(f"\n# Control Register Values{' for ' + label if label else ''}")
    reg_set = REG_TOP_CTRL if "REG_NUM_M" in ctrl else REG_CTRL
    for idx, (key, offset) in enumerate(reg_set.items()):
        val = ctrl.get(key, 0)
        # Convert register name to lowercase format without prefix
        name = key.split("_", 1)[1].lower()
        print(f" {offset:02d}\t{name:<18}\t0x{val:<8x}\t{val:<10}")


def calculate_perf_metrics(stats):
    """Calculate common performance metrics from stats registers"""
    # Extract basic counters
    write_bursts = stats.get("STAT_W_BURST_CNT", 1)  # Avoid division by zero
    write_beats = stats.get("STAT_W_BEAT_CNT", 0)
    total_write_bytes = stats.get("STAT_AW_BYTES_SUM", 0)

    # Calculate write latency
    write_latency_numerator = (
        stats.get("STAT_W_EARLY_BEAT_CNT", 0)
        + stats.get("STAT_W_DATA_LAG_CNT", 0)
        + stats.get("STAT_W_EARLY_STALL_CNT", 0)
        + stats.get("STAT_W_B_STALL_CNT", 0)
        + stats.get("STAT_W_ADDR_STALL_CNT", 0)
        + stats.get("STAT_W_ADDR_LAG_CNT", 0)
        + stats.get("STAT_W_B_LAG_CNT", 0)
    )
    write_latency = safe_div(write_latency_numerator, write_bursts)

    # Calculate throughput
    write_throughput_denominator = (
        write_beats
        + stats.get("STAT_W_STALL_CNT", 0)
        + stats.get("STAT_W_AWR_EARLY_CNT", 0)
        + stats.get("STAT_W_SLOW_DATA_CNT", 0)
    )
    write_throughput = safe_div(write_beats, write_throughput_denominator)

    # Calculate bandwidth in bytes per cycle
    bandwidth_bytes_per_cycle = safe_div(
        total_write_bytes, write_throughput_denominator
    )

    return {
        "write_bursts": write_bursts,
        "write_beats": write_beats,
        "total_bytes": total_write_bytes,
        "write_latency": write_latency,
        "write_throughput": write_throughput,
        "bandwidth_bytes_per_cycle": bandwidth_bytes_per_cycle,
    }


def print_performance_summary(block_name, stats, clock_speed_mhz):
    """Print performance summary statistics"""
    try:
        metrics = calculate_perf_metrics(stats)
        write_latency = metrics["write_latency"]
        write_throughput = metrics["write_throughput"]
        bandwidth_MBps = metrics["bandwidth_bytes_per_cycle"] * clock_speed_mhz

        print(f"\n# Performance Summary:")
        print(f" {'LATENCY':<20}: {write_latency:.2f} cycles/burst")
        print(f" {'THROUGHPUT':<20}: {write_throughput:.2f} beats/cycle")
        print(f" {'BANDWIDTH':<20}: {bandwidth_MBps:.2f} MB/s")
    except Exception as e:
        print(f" Failed to compute stats for {block_name}: {e}")


def configure_all_managers(axi, num_m, settings_dict):
    """Configure all managers with their respective settings

    Args:
        axi: AxiBridgeUart instance
        num_m: Number of managers
        settings_dict: Dictionary mapping manager IDs to register settings
    """
    for manager_id, settings in settings_dict.items():
        if manager_id < 0 or manager_id >= num_m:
            print(f"\nError: Invalid manager ID {manager_id}. Valid range: 0-{num_m-1}")
            continue

        write_manager_settings(axi, manager_id, num_m, settings)


def main():
    if len(sys.argv) != 2:
        print("Usage: axi_stats <serial_port>")
        return 1

    serial_port = sys.argv[1]

    try:
        axi = AxiBridgeUart(serial_port)

        # Get the number of managers (NUM_M)
        num_m = get_num_managers(axi)
        print(f"# Detected NUM_M: {num_m}")

        # Get clock frequency
        cpu_freq_hz = get_clock_freq(axi)
        clock_speed_mhz = cpu_freq_hz / 1_000_000
        print(f"# Clock frequency: {clock_speed_mhz:.2f} MHz")

        axi_data_width = get_axi_data_width(axi)
        print(f"# AXI data width: {axi_data_width} bits")

        # TODO: load these
        # Generate settings for each manager
        mgr_settings = {}
        for m in range(num_m):
            mgr_settings[m] = gen_manager_settings(m, axi_data_width)

        print("\n# Configuring managers")
        configure_all_managers(axi, num_m, mgr_settings)

        print("\n# Running test")
        clear_perf(axi, num_m)
        start_perf(axi, num_m)
        wait_for_idle(axi, num_m)

        # Display top control and stats register info
        top_ctrl_idx = 0
        top_ctrl_addr = calculate_base_addr(top_ctrl_idx, num_m)

        top_stats_idx = 1
        top_stats_addr = calculate_base_addr(top_stats_idx, num_m)

        print(f"\n{'='*80}")
        print(f"# AGGREGATE")
        print(f"{'='*80}")

        print(f"# Control base address: 0x{top_ctrl_addr:08X}")
        print(f"# Stats base address:   0x{top_stats_addr:08X}")

        # Read and print top control registers
        top_ctrl = read_registers(axi, top_ctrl_addr, REG_TOP_CTRL)
        print_raw_ctrl(top_ctrl, "Top-level")

        # Read and print top stats registers
        top_stats = read_registers(axi, top_stats_addr, REG_STATS)
        print_raw_stats(top_stats, "Top-level")

        # Print performance summary at the end
        print_performance_summary("AXI (Top-level)", top_stats, clock_speed_mhz)

        for m in range(num_m):
            # Manager control regs are at indices 2 to (2+NUM_M-1)
            m_ctrl_idx = 2 + m
            m_ctrl_addr = calculate_base_addr(m_ctrl_idx, num_m)

            # Manager stats are at indices (2+NUM_M) to (2+2*NUM_M-1)
            m_stats_idx = 2 + num_m + m
            m_stats_addr = calculate_base_addr(m_stats_idx, num_m)

            # Read control and stats registers
            m_ctrl = read_registers(axi, m_ctrl_addr, REG_CTRL)
            m_stats = read_registers(axi, m_stats_addr, REG_STATS)

            # Header
            print(f"\n{'='*80}")
            print(f"# MANAGER {m}")
            print(f"{'='*80}")

            # Print detailed registers
            print(f"# Control base address: 0x{m_ctrl_addr:08X}")
            print(f"# Stats base address:   0x{m_stats_addr:08X}")
            print_raw_ctrl(m_ctrl, f"Manager {m}")
            print_raw_stats(m_stats, f"Manager {m}")
            print_performance_summary(f"AXI Manager {m}", m_stats, clock_speed_mhz)

    except Exception as e:
        print(f"Error: {e}")
        return 1

    axi.close()
    return 0


if __name__ == "__main__":
    sys.exit(main())
